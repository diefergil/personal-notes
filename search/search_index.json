{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Home", "text": ""}, {"location": "#welcome-to-mkdocs", "title": "Welcome to MkDocs", "text": "<p>For full documentation visit mkdocs.org.</p>"}, {"location": "#commands", "title": "Commands", "text": "<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"}, {"location": "#project-layout", "title": "Project layout", "text": "<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}, {"location": "about/", "title": "About", "text": ""}, {"location": "about/#pendet-illud-mutilatae-certa-urgetque-populi-radiis", "title": "Pendet illud mutilatae certa urgetque populi radiis", "text": ""}, {"location": "about/#et-nostra-quod-quamvis-tamen", "title": "Et nostra quod quamvis tamen", "text": "<p>Lorem markdownum erat perque, colebat dedit; collo habuit relictis falcato et fide mente iugulatus intrat. Tenet orbe ignoscite Saturnia valeant ulla neque orant positus mea aspicit aegide loquentem animae postquam cecidere aras. Prosilit quod ignavo in crinis metus unda, di Stygias florebat lacrimantem vellent nunc, et undis moenia mecum?</p>"}, {"location": "about/#ferat-teli-exitio-acrisius-et-modo-veteres", "title": "Ferat teli exitio Acrisius et modo veteres", "text": "<p>Idas feram an esse paruerit feres; cadet tonitruque nostra femur ipse. Ut errat tenet magni ultra ne signa, sub, obstantis legit non, auctor.</p> <ul> <li>Haec quondam relaxant litora auxiliaria ferro Ampycides</li> <li>Corda sceleri</li> <li>Furiisque stimulis domos quod per palla</li> <li>Ire responderat legit i qua frugum fuit</li> <li>Ignarus nepotem do gravis</li> </ul>"}, {"location": "about/#et-averna-cernimus-adsuetos-aiax-interea-perque", "title": "Et Averna cernimus adsuetos Aiax interea perque", "text": "<p>Mihi aversa ignisque flumina: miscet: ab deo sive avidisque. Ad veni deponendique pars interdum Byblis noctem, sed nostro, nec satis ignotissima. Subitus longis, faciemque amorem. Nube ilia opus vulnere mentis mihi sorores referam sperato, hos ignis possedit et invenit, mens saecula aetas comitesque.</p>"}, {"location": "about/#montibus-aurora-barba-achaide", "title": "Montibus Aurora barba Achaide", "text": "<p>Tutaque verumque monimenta clamata et pretium gemellos latratu Minoa aequore; puerum. Tartareas priori inscripta spretae sua, iactat adspice peregrinosque metallis expellitur. Duobus sed vigoris illa mutatus, multicavo animosa!</p> <ul> <li>Abdita laticesque lepores ferro sibi suam per</li> <li>Litora sub Cecropide</li> <li>Me vincula quod dabat flumen mensuraque secura</li> <li>Pulsavere cantus redeuntem peritura</li> <li>Et luctatusque aequantia caedis praesagia montis certamina</li> <li>Suos est lucem fine velox ubi nam</li> </ul> <p>Fessos animis custodit cumque, Priamidas, lucem mihi Pyrrha; namque. Ille nihil: illo ultor nisi materque sit sensit, Cyllenaeo opus.</p>"}, {"location": "python/pytest/", "title": "Pytests", "text": "", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#pytest", "title": "Pytest", "text": "", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#test-layouts", "title": "Test layouts", "text": "<ul> <li>Directory layout starts with <code>tests</code></li> <li>From <code>tests</code> you can add anything like <code>unit</code>, <code>functional</code> or other meaningful   names like <code>database</code></li> <li>Files need to be pre-fixed with <code>test_</code></li> <li>Test functions need to be prefixed with <code>test_</code></li> <li>Test classes need to be prefixed with <code>Test</code></li> </ul>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#how-syntax-works", "title": "How syntax works", "text": "<p>Tests can be functions or classes</p>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#functions", "title": "Functions", "text": "<pre><code>def test_my_function():\n  assert 1 == 1\n</code></pre>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#classes", "title": "Classes", "text": "<p>Classes do not need inheritance:</p> <p></p> <pre><code># This function is here for convenience only, in a real-world scenario this function\n# would be elsewhere in a package\n\ndef str_to_int(string):\n\"\"\"\n    Parses a string number into an integer, optionally converting to a float\n    and rounding down.\n    You can pass \"1.1\" which returns 1\n    [\"1\"] -&gt; raises RuntimeError\n    \"\"\"\n    error_msg = \"Unable to convert to integer: '%s'\" % str(string)\n    try:\n        integer = float(string.replace(',', '.'))\n    except AttributeError:\n        # this might be a integer already, so try to use it, otherwise raise\n        # the original exception\n        if isinstance(string, (int, float)):\n            integer = string\n        else:\n            raise RuntimeError(error_msg)\n    except (TypeError, ValueError):\n        raise RuntimeError(error_msg)\n\n    return int(integer)\n\n# When you create yout class test you have special methods\nclass TestStrToInt:\n\n    def setup_method(self):\n        print('\\nthis is setup')\n\n    def teardown_method(self):\n        print('\\nthis is teardown')\n\n    def setup_class(cls):\n        print('\\nthis is setup class')\n\n    def teardown_class(cls):\n        print('\\nthis is teardown class')\n\n    def test_rounds_down(self):\n        result = str_to_int('1.99')\n        assert result == 2\n\n    def test_round_down_lesser_half(self):\n        result = str_to_int('1.2')\n        assert result == 2\n</code></pre> <p>That setup_class is executed before a test in a class and happens just once, and setup_method is executed before every test in the class.</p> <p>You can use these special methods to run code before all tests in a class or before each one.</p> <p>You can see the ouput here:</p> Ouptut example <pre><code>======================================= test session starts =======================================\nplatform linux -- Python 3.8.10, pytest-7.2.0, pluggy-1.0.0\nrootdir: /home/coder/python-testing/notebooks/lesson2\ncollected 2 items\n\ntest-classes/test_classes.py FF                                                             [100%]\n\n============================================ FAILURES =============================================\n__________________________________ TestStrToInt.test_rounds_down __________________________________\n\nself = &lt;test_classes.TestStrToInt object at 0x7f9e8a8c8220&gt;\n\n    def test_rounds_down(self):\n        result = str_to_int('1.99')\n&gt;       assert result == 2\nE       assert 1 == 2\n\ntest-classes/test_classes.py:44: AssertionError\n-------------------------------------- Captured stdout setup --------------------------------------\n\nthis is setup class\n\nthis is setup\n------------------------------------ Captured stdout teardown -------------------------------------\n\nthis is teardown\n____________________________ TestStrToInt.test_round_down_lesser_half _____________________________\n\nself = &lt;test_classes.TestStrToInt object at 0x7f9e8a8c8340&gt;\n\n    def test_round_down_lesser_half(self):\n        result = str_to_int('1.2')\n&gt;       assert result == 2\nE       assert 1 == 2\n\ntest-classes/test_classes.py:48: AssertionError\n-------------------------------------- Captured stdout setup --------------------------------------\n\nthis is setup\n------------------------------------ Captured stdout teardown -------------------------------------\n\nthis is teardown\n\nthis is teardown class\n===================================== short test summary info =====================================\nFAILED test-classes/test_classes.py::TestStrToInt::test_rounds_down - assert 1 == 2\nFAILED test-classes/test_classes.py::TestStrToInt::test_round_down_lesser_half - assert 1 == 2\n======================================== 2 failed in 0.02s ========================================\n</code></pre>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#run-tests", "title": "Run tests", "text": "<p>In the test directory</p> <pre><code>pytest -vvvv tests/\n</code></pre> Ouptut example <pre><code>============================= test session starts ==============================\nplatform linux2 -- Python 2.7.17, pytest-3.6.4, py-1.8.0, pluggy-0.7.1 -- /usr/bin/python2\ncachedir: .pytest_cache\nrootdir: /content, inifile:\n\ncollecting 0 items\ncollecting 2 items\ncollecting 2 items\ncollecting 2 items\ncollected 2 items\n\ntest_util.py::TestFloats::test_rounds_down FAILED                        [ 50%]\ntest_util.py::TestFloats::test_round_down_lesser_half FAILED             [100%]\n\n=================================== FAILURES ===================================\n_________________________ TestFloats.test_rounds_down __________________________\n\nself = &lt;test_util.TestFloats instance at 0x7fbf26d90870&gt;\n\n    def test_rounds_down(self):\n        result = str_to_int('1.99')\n&gt;       assert result == 2\nE       assert 1 == 2\n\ntest_util.py:42: AssertionError\nshow more (open the raw output data in a text editor) ...\n\n\nthis is teardown\n\nthis is teardown class\n=========================== 2 failed in 0.04 seconds ===========================\n</code></pre>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#testing-failures", "title": "Testing failures", "text": "<p>Enter to the python debugger where your code is failing:</p> <pre><code>pytest --pdb test_failure_output.py\n</code></pre> <p>Once entered in the debugger you can type <code>h</code> to see the commands that you can use.</p>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#another-commands-for-pytest", "title": "Another commands for pytest", "text": "<ul> <li><code>--collect-only</code> -&gt; Only collect tests, don't execute them</li> <li><code>-x</code> -&gt; Stop at the first failure</li> </ul> <p>To see all type:</p> <pre><code>pytest --help\n</code></pre>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#plugins", "title": "Plugins", "text": "", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#pytest-xdist", "title": "pytest-xdist", "text": "<p>Gives you the ability to run instance for running your test using the <code>-n</code> cli parameter.</p> <pre><code>pytest -n 4 test/\n</code></pre> <p>Going to set 4 differents runner instances and run them at the same time.</p>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#other-functionalities", "title": "Other functionalities", "text": "", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#parametrize-tests", "title": "Parametrize tests", "text": "<p>Parametrize tests it's like put a for loop over the tests that you want to expect  the same result using the same function. The problem with plain for loops it's  that the output it's a little bit confused. You don't know really where the error  is located and if the rest of the loop it's going to be cover. So a good  option it's parametrize tests.</p> str_to_bool function: <pre><code>  def str_to_bool(val):\n\"\"\"\n    Convert a string representation of truth to True or False\n    True values are 'y', 'yes', or ''; case-insensitive\n    False values are 'n', or 'no'; case-insensitive\n    Raises ValueError if 'val' is anything else.\n    \"\"\"\n    true_vals = ['yes', 'y', '']\n    false_vals = ['no', 'n']\n    try:\n        val = val.lower()\n    except AttributeError:\n        val = str(val).lower()\n    if val in true_vals:\n        return True\n    elif val in false_vals:\n        return False\n    else:\n        raise ValueError(\"Invalid input value: %s\" % val)\n</code></pre> <pre><code> import pytest\nfrom src impport str_to_bool # function to convert string to bool\n\n\n@pytest.mark.parametrize('value', ['y', 'yes', ''])\ndef test_is_true(value):\n    result = str_to_bool(value)\n    assert result is True\n</code></pre> Example output: <pre><code>======================================= test session starts =======================================\nplatform linux -- Python 3.8.10, pytest-7.2.0, pluggy-1.0.0\nrootdir: /home/coder/python-testing/notebooks/lesson2\ncollected 3 items\n\nparametrize/test_utils.py ...                                                               [100%]\n\n======================================== 3 passed in 0.01s ========================================\n</code></pre>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#fixtures", "title": "Fixtures", "text": "<p>In pytest, fixtures are a way to provide data or test-doubles (mocks, stubs, etc) to your tests. They are created using the <code>@pytest.fixture</code> decorator and then injected into your tests as arguments. Fixtures are meant to simplify test setup and teardown code, and they help to make your tests more modular and scalable.</p> <p>Here's a basic example of how to use a fixture in pytest:</p> <pre><code>import pytest\n\n# Define a fixture\n@pytest.fixture\ndef my_fixture():\n    return \"Hello, World!\"\n\n# Use the fixture in a test\ndef test_hello(my_fixture):\n    assert my_fixture == \"Hello, World!\"\n</code></pre> <p>In this example, the <code>my_fixture</code> fixture is defined to return the string <code>\"Hello, World!\"</code>. Then, in the <code>test_hello</code> test, <code>my_fixture</code> is injected as an argument. When pytest runs this test, it first calls the my_fixture fixture function and then passes its return value to <code>test_hello</code>.</p> <p>Here's a more complex example where a fixture is used for setup and teardown:</p> <pre><code>import pytest\n\n# Define a fixture\n@pytest.fixture\ndef database():\n    db = setup_database()  # Setup code\n    yield db  # This is what will be injected into your tests\n    teardown_database(db)  # Teardown code\n\n# Use the fixture in a test\ndef test_db(database):\n    assert database.is_connected()\n</code></pre> <p>In this example, the <code>database</code> fixture is used to manage a database connection. The setup_database function is called to establish the connection, and then the connection object is yielded to the test. After the test runs, the <code>teardown_database</code> function is called to clean up the connection.</p>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#fixture-scopes", "title": "fixture scopes", "text": "<p>Fixture scope determines when a fixture is set up and torn down. The possible scopes are function, class, module, package or session:</p> <ul> <li><code>function</code>: The default scope, the fixture is set up and torn down for each test function.</li> <li><code>class</code>: The fixture is set up and torn down for each test class.</li> <li><code>module</code>: The fixture is set up and torn down once per test module.</li> <li><code>package</code>: The fixture is set up and torn down once per test package.</li> <li><code>session</code>: The fixture is set up once when the test session starts, and is torn down once at the end of the test session.</li> </ul> <pre><code>import pytest\n\n@pytest.fixture(scope=\"module\")\ndef module_fixture():\n    # Setup code here\n    yield \"Hello, Module!\"\n    # Teardown code here\n</code></pre>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#fixture-dependencies", "title": "Fixture dependencies", "text": "<p>Fixtures can use other fixtures. This is often useful when you want to modularize your fixtures for reuse and better organization.</p> <pre><code>import pytest\n\n@pytest.fixture\ndef order():\n    return {\"name\": \"Burger\", \"price\": 7.99}\n\n@pytest.fixture\ndef cart(order):\n    return [order]\n\ndef test_cart(cart):\n    assert len(cart) == 1\n````\n\n#### conftest\n\nThe conftest.py file serves as a means of providing fixtures for an entire directory\nof tests. Any fixture defined in conftest.py will be automatically available to all\ntest files in the same directory and subdirectories.\n\n```python\n# conftest.py\nimport pytest\n\n@pytest.fixture\ndef my_fixture():\n    return \"Available Everywhere\"\n</code></pre>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#temporal-directories", "title": "temporal directories", "text": "<p>The tmpdir fixture is a built-in pytest fixture that creates a temporary directory unique to the test invocation, which is automatically cleaned up after the test.</p> <pre><code>class TestMyClass:\n\n    def test_write_Yes(self, tmpdir):\n        path = str(tmpdir.join(\"test_value\"))\n        write_integer(\"Yes\", path)\n        with open(path, \"r\") as _f:\n            value = _f.read()\n\n        assert value == \"True\"\n</code></pre>", "tags": ["Python", "Tests", "Development"]}, {"location": "python/pytest/#monkeypatch", "title": "Monkeypatch", "text": "<p>The monkeypatch fixture helps to safely set/delete an attribute, dictionary item or environment variable or to modify sys.path for importing.</p> <pre><code>def test_monkeypatch(monkeypatch):\n    result = {\"HELLO\": \"world\"}\n    monkeypatch.setenv(\"HELLO\", \"monkeypatched\")\n    assert result[\"HELLO\"] == \"monkeypatched\"\n</code></pre>", "tags": ["Python", "Tests", "Development"]}]}